{"version":3,"file":"badge.d.ts","sources":["badge.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { CanDisable, ThemePalette } from '@angular/material/core';\n/** @docs-private */\ndeclare const _MatBadgeBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & {\n    new (): {};\n};\n/** Allowed position options for matBadgePosition */\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';\n/** Allowed size options for matBadgeSize */\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\n/** Directive to display a text badge. */\nexport declare class MatBadge extends _MatBadgeBase implements OnInit, OnDestroy, CanDisable {\n    private _ngZone;\n    private _elementRef;\n    private _ariaDescriber;\n    private _renderer;\n    private _animationMode?;\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color(): ThemePalette;\n    set color(value: ThemePalette);\n    private _color;\n    /** Whether the badge should overlap its contents or not */\n    get overlap(): boolean;\n    set overlap(val: boolean);\n    private _overlap;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position: MatBadgePosition;\n    /** The content for the badge */\n    get content(): string | number | undefined | null;\n    set content(newContent: string | number | undefined | null);\n    private _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description(): string;\n    set description(newDescription: string);\n    private _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size: MatBadgeSize;\n    /** Whether the badge is hidden. */\n    get hidden(): boolean;\n    set hidden(val: boolean);\n    private _hidden;\n    /** Unique id for the badge */\n    _id: number;\n    /** Visible badge element. */\n    private _badgeElement;\n    /** Whether the OnInit lifecycle hook has run yet */\n    private _isInitialized;\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, _renderer: Renderer2, _animationMode?: string | undefined);\n    /** Whether the badge is above the host or not */\n    isAbove(): boolean;\n    /** Whether the badge is after the host or not */\n    isAfter(): boolean;\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement(): HTMLElement | undefined;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Creates the badge element */\n    private _createBadgeElement;\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    private _updateRenderedContent;\n    /** Updates the host element's aria description via AriaDescriber. */\n    private _updateHostAriaDescription;\n    /** Adds css theme class given the color to the component host */\n    private _setColor;\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    private _clearExistingBadges;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_hidden: BooleanInput;\n    static ngAcceptInputType_overlap: BooleanInput;\n}\nexport {};\n"]}